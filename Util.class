package me.imrensitoh.apples.utils;

import java.util.*;
import java.util.concurrent.*;
import java.text.*;
import org.apache.commons.lang.time.*;
import org.bukkit.*;
import org.bukkit.entity.*;

public class Util
{
    private static long MINUTE;
    private static long HOUR;
    private static Map<UUID, String> uuidToName;
    private static Map<String, UUID> nameToUUID;
    
    static {
        Util.MINUTE = TimeUnit.MINUTES.toMillis(1L);
        Util.HOUR = TimeUnit.HOURS.toMillis(1L);
        Util.uuidToName = new ConcurrentHashMap<UUID, String>();
        Util.nameToUUID = new ConcurrentHashMap<String, UUID>();
    }
    
    public static String getRemaining(final long millis, final boolean milliseconds) {
        return getRemainingg(millis, milliseconds, true);
    }
    
    public static String getRemainingg(final long duration, final boolean milliseconds, final boolean trail) {
        if (milliseconds && duration < Util.MINUTE) {
            return String.valueOf(String.valueOf((trail ? DateTimeFormats.REMAINING_SECONDS_TRAILING : DateTimeFormats.REMAINING_SECONDS).get().format(duration * 0.001))) + 's';
        }
        return DurationFormatUtils.formatDuration(duration, String.valueOf(String.valueOf((duration >= Util.HOUR) ? "HH:" : "")) + "mm:ss");
    }
    
    public static String translate(final String translate) {
        return ChatColor.translateAlternateColorCodes('&', translate);
    }
    
    public static void pmensaje(final Player player, final String msg) {
        player.sendMessage(ChatColor.translateAlternateColorCodes('&', msg));
    }
    
    public static Integer tryParseInt(final String string) {
        try {
            return Integer.parseInt(string);
        }
        catch (IllegalArgumentException ex) {
            return null;
        }
    }
}
